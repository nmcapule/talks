WebAssembly with Go
An Introduction
18:30 31 Jan 2019
Tags: foo, bar, baz

Nathaniel Capule
Software Developer, Concentrix
nmcapule@gmail.com
github.com/nmcapule

* Before WebAssembly

* NaCL / PNaCL

Something like a prototype version of WebAssembly. Pushed by Google.

- *NaCL*: Run compiled C/C++ code at near native speeds. Architecture specific - need to compile for each platform.
- *PNaCL*: It's like NaCL, but portable. Compiles C/C++ to portable executable. Think Java bytecode. There are some efforts to allow other languages to compile with PNaCL.

: Google even allowed some Chrome apps to be written in PNaCL.

* asm.js

A strict subset of JavaScript. Pushed by Mozilla.

- JavaScript engines (v8, SpiderMonkey, etc) tries it best to optimize the hell out of JavaScript codes.
- Some code, they can understand easily. Some code, they can optimize very much that it's close to native code execution.
- *asm.js* is JavaScript code, written to be very much understandable, very much optimizable by JavaSCript engines.

* asm.js

*Input*: C

.code snippets/asm-pre.c

*Output*: asm.js

.code snippets/asm-post.js

* Back to WebAssembly

Some years ago in 2015, major browser vendors met up and decided maybe it's time to extend the browser, to allow running some close to metal codes and take better advantage of the users' hardware.

.link webassembly.org

WebAssembly (or Wasm) is a binary instruction format for a stack-based virtual machine.

Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.

* Why WebAssembly

- faster than JavaScript (start-up, execution)

: Same reason why there are still Assembly sections on some codebase written in high-level languages. Minus the architecture-specific implementation part, because WebAssembly is portable (that is it runs across browsers).

- readable and debuggable (It even has S-expressions!)
- safe and sandboxed
- open web

.code snippets/wasm-s-expr.txt

* WebAssembly with Go

* Why WebAssembly with Go?

: Same as the usual advantage of using WebAssembly

- Less JavaScript? Usual JavaScript with the faster bits optimized by being coded in Go Wasm?

- Game development, physics simulation, canvas painting (think Photoshop), etc, in the browser with Go

- Now possible to have a development workflow that can take advantage of both frontend and backend in Go.

- GopherJS already accumulated some traction: gopherjs/vecty, oskca/gopherjs-vue, hajimehoshi/ebiten, etc. Wasm can capitalize due to planned easy migration from GopherJS to Go WebAssembly.

: Remember they have the same author

: Why not?

* WebAssembly with Go

Before WebAssembly support in the Go compiler, there's

: There were already some efforts to bring Go to the frontend, and one of the frontrunners of the race (before Wasm) is *GopherJS*.

*GopherJS* - compiles Go code to asm.js.

.code snippets/gopherjs.go

: The above code sets a js global var "pet" with a function "New"

* WebAssembly with Go

Go 1.11 (2018) included an experimental port of Wasm in Go, contributed by the creator of GopherJS.

* WebAssembly with Go

1. Compile your Go code to Wasm.

  $ GOOS=js GOARCH=wasm go build -o main.wasm main.go

2. Get the Wasm support file.

  $ cp "$(go env GOROOT)/misc/wasm/wasm_exec.js" .

3. Attach both the support file and compiled wasm to your html page.


  <script src="wasm_exec.js"></script>
  <script>
  const go = new Go();
  WebAssembly.instantiateStreaming(fetch("main.wasm"), go.importObject).then((result) => {
    go.run(result.instance);
  });
  </script>

4. Serve. Make sure that the wasm file is served with content type = "application/wasm"

  $ go run serve.go

* Demo

* Demo

.code main_sleeper.go

* Demo

.code main_dom.go

* Debugging

- Debugging not yet available for Go-WebAssembly's current release

- Print line debugging (for now)

* Testing

There's a way to run Go-WebAssembly in `node`. As long as Go and node are installed, we can:

  $ GOOS=js GOARCH go run -exec="$(go env GOROOT)/misc/wasm/go_js_wasm_exec" main.go

Or with testing:

  $ GOOS=js GOARCH go test -exec="$(go env GOROOT)/misc/wasm/go_js_wasm_exec" main.go

* Examples

.link https://stdiopt.github.io/gowasm-experiments/bumpy

.link https://stdiopt.github.io/gowasm-experiments/splashy

Not Go-WebAssembly, but still cool WebAssembly demo

.link https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html

* Room for improvements

- File size for Go-generated wasm files are too large atm. Hello World costs `2.4MB`. The docs recommends using TinyGo compiler and/or compressing the dot-wasm files.

.link https://tinygo.org

.link https://github.com/golang/go/wiki/WebAssembly#reducing-the-size-of-wasm-files

: It's already a known problem with vanilla Go compile that it produces large executables, since it includes the Go runtime.

- Runtime and startup perf is oftentimes slower than native JS. If you want to take advantage of Wasm _now_, better use C/C++/Rust. Or use GopherJS (better browser compatibility, file size comparable to JS).

* References

.link https://github.com/golang/go/wiki/WebAssembly#getting-started

.link https://medium.com/gopherjs/future-of-gopherjs-and-go-in-the-browser-cc1667468160
